//문제
//구름 RPG는 여느 RPG 게임과 비슷하게 몬스터를 잡아서 레벨을 올리거나 유저 간 전투를 할 수 있는 RPG 게임이다. 하지만 다른 RPG 게임들과 차별점을 두기 위해, 유저 간 전투에서 적에게 공격을 받을 때의 체력의 감소량을 독특하게 계산한다.
//구름 RPG에는 무기와 갑옷마다 고유값이 부여되어 있다. 고유값은 항상 2 이상의 정수이다. 만약 상대방으로부터 공격을 받을 때, 다음과 같이 계산되어 체력의 감소량이 정해진다.
//나의 체력을 H, 나의 갑옷의 고유값을 A, 상대방의 무기의 고유값 W라 한다.
//다음과 같은 두 조건을 만족하면 W 만큼 H 가 감소한다.
//A > W
//A % W = 0
//위 두 조건을 모두 만족하지 않는다면 H 는 감소하지 않는다.
//
//위와 같은 계산법으로 인해 유저 간 전투에서 어떤 경우에도 체력이 감소하지 않게 해주는 갑옷이 몇몇 존재하는데, 사람들은 이 갑옷들을 판타스틱한 갑옷이라고 부른다.
//그런데 판타스틱한 갑옷 자체가 너무 강력했기 때문에 게임 밸런스를 깨뜨린다는 사람들의 여론이 들끓기 시작했고, 구름 RPG의 운영자는 여론을 가라앉히기 위해 누구나 판타스틱한 갑옷을 가질 수 있도록 갑옷 변형 시스템을 추가했다.
//갑옷 변형 시스템은 일정 재화를 소비해서 갑옷의 고유값을 1 씩 내릴 수 있는 시스템이다. 물론, 고유값을 2 미만으로 내릴 수는 없다.
//구름 RPG의 유저 구르미는 여러 갑옷을 입수했고, 입수한 갑옷들을 갑옷 변형 시스템을 이용하여 판타스틱한 갑옷으로 만들려고 한다.
//유저 구르미가 입수한 갑옷들의 고유값 차례대로 주어질 때, 갑옷마다 판타스틱한 갑옷으로 만들기 위해 사용해야 하는 갑옷 변형 시스템의 최소 횟수를 알아보자.
//이때, 유저 구르미는 갑옷 변형 시스템을 얼마든지 써도 부족하지 않을 만큼 재화를 소지하고 있다.
//
//입력
//첫째 줄에 유저 구르미가 입수한 갑옷의 개수 N 이 주어진다.
//둘째 줄부터 N 개의 줄에 걸쳐 i 번째 줄에 i 번째 갑옷의 고유값 A(i) 가 주어진다.
//1 <= N <= 5,000
//2 <= A(i) <= 100,000
//입력으로 주어지는 모든 수는 정수이다.
//
//출력
//N 개의 줄에 걸쳐 i 번째 줄에는 i 번째 갑옷을 판타스틱한 갑옷으로 만들기 위해 사용해야 하는 갑옷 변형 시스템의 최소 횟수를 출력한다. 단, 판타스틱한 갑옷으로 만들 수 없다면 -1을 출력한다.
//
//예시 1
//입력
//3
//2
//3
//4
//출력
//0
//0
//1

// A가 소수면 된다. 입력받은 A(i) 가 소수가 아니라면 가장 가까운 소수자리를 찾아 몇번 시스템을 적용시켜야하는지 계산한다.
import java.io.*;
import java.util.*;

class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());

        // 소수 찾기. 에라토스테네스의 채 방식 적용
        boolean[] isPrime = new boolean[100001];	// A 범위만큼의 배열 생성
        Arrays.fill(isPrime, true);		// 우선 모든 수가 소수라고 가정
        isPrime[0] = false;		// 0과 1은 소수가 아님
        isPrime[1] = false;

        for(int i=2; i * i <= 100000; i++) {
            if(isPrime[i]) {		// i가 소수라면
                for(int j = i*i; j <= 100000; j+=i) {
                    isPrime[j] = false;		// i의 배수들은 소수가 아님
                }
            }
        }

        // 갑옷 입력 처리
        for(int i=0; i<N; i++) {
            int A = Integer.parseInt(br.readLine());

            // A가 소수라면 변형할 필요 없음
            if(isPrime[A]) {
                System.out.println(0);
            } else {
                // A가 소수가 아니라면 A보다 작은 소수 중 가장 가까운 값 찾기
                int changes = 0;
                while(A > 2) {
                    if(isPrime[A]) {
                        break;
                    }
                    A--;
                    changes++;
                }

                // 변형 후 소수가 아님 (-1)
                if(A==2 && !isPrime[A]) {
                    System.out.println(-1);
                } else {
                    System.out.println(changes);
                }
            }
        }

    }
}